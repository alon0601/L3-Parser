
(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res) (if (eq? (car res) "ok") #t #f) #f)
  )
 )

(define error?
  (lambda (res)
    (if (pair? res) (if(eq? (car  res) "error") #t #f) #f)
  )
 )

(define result?
  (lambda (res)
    (if (ok? res) #t 
    (if (error? res) #t #f))
  )
 )

(define result->val
  (lambda (res)
    (cdr res)
  )
)

(define bind 
  (lambda (f)
    (lambda (x) 
      (if (ok? x) (f (result->val x)) (if (error? x) x (make-error x)))
    )
  )
)

(define make-dict
  (lambda ()
    (cons "dict" '())
  )
)

(define dict?
  (lambda (e)
    (if (pair? e) (if(eq? (car  e) "dict") #t #f) #f)
  )
)

(define get
  (lambda (dict k)
    (if (dict? dict)
      (get-rec (cdr dict) k)
        (make-error "Error: not a dictionary")
    )
  )
)

(define get-rec
  (lambda (no-dict k)
    (if (eq? no-dict '())
      (make-error "Key not found")
        (if (eq? (car (car no-dict)) k) 
          (make-ok (cdr (car no-dict)))  
            (get-rec (cdr no-dict) k)
        )
    )
  )
)

(define put-rec
  (lambda (no-dict k v)
    (if (eq? no-dict '()) (cons (cons k v) '())
      (if (eq? (car (car no-dict)) k) 
        (cons (cons k v) (cdr no-dict))
          (cons (car no-dict) (put-rec (cdr no-dict) k v))
      )
    )
  )
)

(define put
  (lambda (dict k v)
    (if (dict? dict) (make-ok (cons "dict" (put-rec (cdr dict) k v))) (make-error "Error: not a dictionary"))
  )
)

(define map-dict
  (lambda (dict f)
    (if (dict? dict) (make-ok (cons "dict" (map-dict-rec (cdr dict) f)))
      (make-error "Error: not a dictionary")
    )
  )
)

(define map-dict-rec
  (lambda (dict f)
    (if (eq? dict '()) '()
      (cons (cons (car (car dict)) (f (cdr (car dict)))) (map-dict-rec (cdr dict) f))
    )
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
